---
---
<button id="to-top">
    <svg width="32" height="32" viewBox="0 0 32 32" fill="none" xmlns="http://www.w3.org/2000/svg">
        <path d="M15.9993 6.66675V25.3334M15.9993 6.66675L25.3327 16.0001M15.9993 6.66675L6.66602 16.0001" stroke="black" stroke-width="3" stroke-linecap="round" stroke-linejoin="round"/>
    </svg>
</button>

<style>
    #to-top {
        -webkit-appearance: none;
        -moz-appearance: none;
        border: none;
        background-color: transparent;
        position: fixed;
        bottom: 110px;
        right: var(--spacing-2);
        font-size: 2rem;
        transition: .4s;
        cursor: pointer;
        opacity: 0;
        visibility: hidden;
        transform: scale(0.5);

        svg path {
            stroke: hsla(var(--secondary-color), 1);
        }

        &:hover {
            background-color: transparent;
        }
    }
</style>
<script>
    // Variáveis globais para controlar o estado
    let isInitialized = false;
    let scrollToTopBtn = null;
    let scrollHandler = null;
    let clickHandler = null;

    const initializeToTop = () => {
        // Evita inicialização múltipla
        if (isInitialized) {
            return;
        }

        scrollToTopBtn = document.querySelector("#to-top");
        
        if (!scrollToTopBtn) {
            console.warn("Botão 'to-top' não encontrado no DOM");
            return;
        }

        // Define os handlers como funções nomeadas para facilitar remoção
        clickHandler = () => {
            window.scrollTo({
                top: 0,
                behavior: "smooth"
            });
        };

        scrollHandler = () => {
            const scrollTotal = document.documentElement.scrollHeight - window.innerHeight;
            const scrollPosition = window.scrollY;
            
            // Evita divisão por zero
            if (scrollTotal <= 0) {
                return;
            }
            
            const scrollPercentage = (scrollPosition / scrollTotal) * 100;

            if (scrollPercentage > 20) {
                scrollToTopBtn.style.opacity = "1";
                scrollToTopBtn.style.visibility = "visible";
                scrollToTopBtn.style.transform = "scale(1)";
            } else {
                scrollToTopBtn.style.opacity = "0";
                scrollToTopBtn.style.visibility = "hidden";
                scrollToTopBtn.style.transform = "scale(0.5)";
            }
        };

        // Adiciona os event listeners
        scrollToTopBtn.addEventListener("click", clickHandler);
        window.addEventListener("scroll", scrollHandler);

        // Executa uma vez para definir o estado inicial
        scrollHandler();

        isInitialized = true;
    };

    const cleanupToTop = () => {
        if (scrollToTopBtn && clickHandler) {
            scrollToTopBtn.removeEventListener("click", clickHandler);
        }
        if (scrollHandler) {
            window.removeEventListener("scroll", scrollHandler);
        }
        isInitialized = false;
        scrollToTopBtn = null;
        clickHandler = null;
        scrollHandler = null;
    };

    const reinitializeToTop = () => {
        cleanupToTop();
        // Pequeno delay para garantir que o DOM está pronto
        setTimeout(initializeToTop, 10);
    };

    const fadeIn = () => {
        document.querySelectorAll('[data-fade]').forEach((element) => {
            const delay = element.getAttribute('data-fade');
            element.style.animationDelay = `${delay}s`;
        });
    };

    // Inicialização e reinicialização
    document.addEventListener('DOMContentLoaded', () => {
        fadeIn();
        initializeToTop();
    });

    // Para navegação SPA do Astro
    document.addEventListener('astro:after-swap', () => {
        fadeIn();
        reinitializeToTop();
    });

    // Cleanup quando a página é descarregada (opcional, para boa prática)
    window.addEventListener('beforeunload', cleanupToTop);
</script>

