---
import Grid from '@components/utils/Grid.astro';
import CopyClipboard from '@components/CopyClipboard/CopyClipboard.jsx';

---

<!-- <header class="header">
    <div class="header__inner">
        <div class="header__inner--left">
            <a href="/" title="Go to Index">
                <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path fill-rule="evenodd" clip-rule="evenodd" d="M24 0H0L12.0286 11.9716L1.33534e-05 24H8.05714L20.0571 11.9716L13.7429 5.68571H17.8L24 0Z"/>
                </svg>
            </a>
        </div>
        
        <div class="header__inner--right">
           
        </div>
    </div>
</header> -->
 <button class="open-menu">
    <span></span>
    <span></span>
    <span></span>
</button>

<style>
    .header {
        width: 100%;
    }

    .header__inner {
        padding: var(--spacing-1) var(--spacing-2);
        display: flex;
        flex-direction: row;
        justify-content: space-between;
        align-items: center;
    }

    .header__inner--left {
        svg {
            fill: hsla(var(--body-text-color), .2);
        }
    }

    .open-menu {
        display: none;
        -webkit-appearance: none;
        border: none;
        background: transparent;
        z-index: 1001;
        padding: 0;
        transform: rotate(0deg);
        transition: .4s ease-in-out;
        width: 30px;
        height: 24px;
        position: fixed;
        right: 1rem;
        top: 2rem;
    }

    @media screen and (max-width: 768px) {
        .header__inner {
            padding: var(--spacing-1);
        }

        .header__inner--right {
            width: max-content;
            padding: var(--spacing-1) 0;
        }

        .open-menu {
            display: block;
        }

        .open-menu span {
            display: block;
            position: absolute;
            height: 2px;
            width: 100%;
            background: hsla(var(--body-text-color), .6);
            border-radius: 9px;
            opacity: 1;
            left: 0;
            transform: rotate(0deg);
            transition: .4s ease-in-out;

            &:nth-child(1) {
                top: 0px;
            }

            &:nth-child(2) {
                top: 10px;
            }

            &:nth-child(3) {
                top: 20px;
            }
        }

        .open-menu.is-active span:nth-child(1) {
            top: 10px;
            transform: rotate(135deg);
        }

        .open-menu.is-active span:nth-child(2) {
            opacity: 0;
        }

        .open-menu.is-active span:nth-child(3) {
            top: 10px;
            transform: rotate(-135deg);
        }
    }
</style>
<script>
// Função para configurar o menu
    const setupMenu = () => {
    const openMenuButton = document.querySelector(".open-menu");
    const nav = document.querySelector(".navigation");

    if (!openMenuButton || !nav) {
        return; // Sai se os elementos não existirem
    }

    // Adiciona um marcador para evitar adicionar listeners múltiplos ao mesmo elemento
    if (openMenuButton.dataset.menuInitialized) {
        return;
    }
    openMenuButton.dataset.menuInitialized = "true";

    // Função para abrir/fechar o menu
    const toggleMenu = () => {
        const isOpen = nav.classList.toggle("is-open");
        openMenuButton.classList.toggle("is-active", isOpen);
    };

    // Adiciona o listener ao botão
    openMenuButton.addEventListener("click", (event) => {
        event.stopPropagation(); // Impede que o clique chegue ao body e feche o menu
        toggleMenu();
    });

    // Listener para fechar o menu ao clicar em um link
    nav.querySelectorAll("a").forEach(link => {
        link.addEventListener("click", () => {
        if (nav.classList.contains("is-open")) {
            toggleMenu();
        }
        });
    });
    };

    // Função para fechar o menu ao clicar fora
    const handleOutsideClick = (event) => {
    const openMenuButton = document.querySelector(".open-menu");
    const nav = document.querySelector(".header__inner--right nav");

    if (nav && nav.classList.contains("is-open") && !nav.contains(event.target) && !openMenuButton.contains(event.target)) {
        nav.classList.remove("is-open");
        openMenuButton.classList.remove("is-active");
    }
    };

    // Função de inicialização que o Astro irá chamar
    const initialize = () => {
    setupMenu();
    // Adiciona o listener de clique fora apenas uma vez ao body
    document.body.removeEventListener("click", handleOutsideClick);
    document.body.addEventListener("click", handleOutsideClick);
    };

    // Executa a inicialização nas navegações do Astro e na carga inicial
    document.addEventListener("astro:page-load", initialize);
    initialize(); // Executa na primeira carga
</script>