---
import { getCollection } from "astro:content";
import Layout from "@layouts/Layout.astro";
import { SiteConfig } from "@utils/SiteConfig";
import Header from "@partials/Header.astro";
import Footer from "@partials/Footer.astro";
import PageHeading from '@partials/PageHeading.astro';
import Grid from '@components/utils/Grid.astro';

//export const prerender = true;

export async function getStaticPaths() {
    const portfolio = await getCollection('works');

    return portfolio.map((item) => ({
        params: { slug: item.slug },
        props: { item },
    }));
}

const { item } = Astro.props;
const colors = item?.data?.colors ?? {};
const backgroundColor = colors.backgroundColor || "black";
const textColor = colors.textColor || "yellow";
const linkColor = colors.linkColor || "red";

let Content = null;
let frontmatter = {};

if (item) {
    frontmatter = item.data || {};
    if (item.render) {
        const rendered = await item.render();
        Content = rendered.Content || null;
    }
}

const themeClass = item?.data?.colors ? "custom-theme" : "dark-theme";

const customStyles = `
  :root.${themeClass} {
    --backgroundColor: ${backgroundColor};
    --textColor: ${textColor};
    --linkColor: ${linkColor};
  }
`;

---

<Layout props={{
    title: `${frontmatter.title || "Sem título"} — ${SiteConfig.title}`,
    description: SiteConfig.description || "Descrição não fornecida",
    image: SiteConfig.image || "Imagem padrão",
    themeClass: themeClass,
}}>
    <Header />

    <main>
        <article class="wrap-sm">
            <header>
                <h1>{frontmatter.title}</h1>
                <p>{frontmatter.role}・{frontmatter.year}</p>
            </header>
        </article>
        
        <section class="content-article">
            <article class="note-content">
                {Content ? <Content /> : <p>Conteúdo não disponível.</p>}
            </article>
        </section>
    </main>

    <Footer />
</Layout>
<style set:html={customStyles}></style>
<style>
    :root.custom-theme {
        --primary-color: var(--backgroundColor);
        --secondary-color: var(--textColor);
        --tertiary-color: var(--linkColor);
    }

    article {
        p {
            a {
                color: hsla(var(--tertiary-color), 1);
                text-decoration-color: hsla(var(--tertiary-color), 1);
            }
        }
    }


    header {
        width: 100%;

        h1 {
            font-size: var(--font-size-h1);
            font-family: var(--title-font);
            color: hsla(var(--tertiary-color), 1);
        }

        h2 {
            font-size: 0.9rem;
            color: hsla(var(--text-body-color), 0.6);
        }

        p {
            font-size: var(--font-size-small);
            text-transform: uppercase;
            font-family: monospace;
            letter-spacing: 0.5px;
        }
    }

    section {
        margin-bottom: var(--spacing-8);
    }

    .note-content {
        margin-top: var(--spacing-4);

        h2 {
            font-size: var(--font-size-h5);
            margin-top: var(--spacing-2);
            margin-bottom: var(--spacing-1);
            font-weight: 500;
            color: hsla(var(--secondary-color), 1);
        }

        .wrap-sm {
            margin-bottom: var(--spacing-8);
        }

        .work__link {
            margin: var(--spacing-4) 0 var(--spacing-2) 0;
            font-size: 0.8rem;
            display: flex;
            flex-direction: row;
            color: hsla(var(--tertiary-color), 1);
            text-decoration-color: hsla(var(--tertiary-color), 1);
            text-transform: uppercase;
            font-family: monospace;
            letter-spacing: 0.5px;

            &:before {
                content: "→";
                display: flex;
                margin-right: 8px;
            }
        }
    }

</style>