---
import { getCollection } from 'astro:content';
import Layout from '@layouts/Layout.astro';
import FormattedDate from '@partials/formattedDate.astro';
import { SiteConfig } from '@utils/SiteConfig';
import Header from '@partials/Header.astro';
import Grid from '@components/utils/Grid.astro';
import NavigationInternal from '@partials/NavigationInternal.astro';

// export const prerender = true;
export async function getStaticPaths() {
    const notes = await getCollection('notes');
    return notes.map((note) => ({
        params: { slug: note.slug },
        props: { note },
    }));
}

const { note } = Astro.props;
const colors = note?.data?.colors ?? {};
const backgroundColor = colors.backgroundColor || "black";
const textColor = colors.textColor || "yellow";
const linkColor = colors.linkColor || "red";
const headingColor = colors.headingColor || "blue";

let Content = null;
let frontmatter = {};

if (note) {
    frontmatter = note.data || {};
    if (note.render) {
        const rendered = await note.render();
        Content = rendered.Content || null;
    }
}

const themeClass = note?.data?.colors ? "custom-theme" : "dark-theme";

const customStyles = `
  :root.${themeClass} {
    --backgroundColor: ${backgroundColor};
    --textColor: ${textColor};
    --linkColor: ${linkColor};
    --headingColor: ${headingColor};
  }
`;

---

<Layout props={{ 
    title: `${frontmatter.title} — ${SiteConfig.title}`,
    description: SiteConfig.description,
    image: SiteConfig.image,
    themeClass: themeClass,
    }}>

    <Header />

    <Grid isContainer>
      <Grid sm="12" md="3">
      	<aside>
          <NavigationInternal />
        </aside>
    	</Grid>

      <Grid sm="12" md="6">
        <main class="note-page">
          <article>
              <header>
                  <FormattedDate date={note.data.publishDate} />
                  <h1>{note.data.title}</h1>
              </header>
          
              <section class="note__content">
                <article>
                  <Content />
                </article>
              </section>
          </article>
        </main>
      </Grid>
    </Grid>
    
</Layout>
<style set:html={customStyles}></style>
<style>
  :root.custom-theme {
    --primary-color: var(--backgroundColor);
    --secondary-color: var(--textColor);
    --tertiary-color: var(--linkColor);
    --heading-color: var(--headingColor);
  }

  article {
    p {
      a {
        color: hsla(var(--tertiary-color), 1);
        text-decoration-color: hsla(var(--tertiary-color), 1)!important;
      }
    }

    header {
      margin-bottom: var(--spacing-4);
      /* text-align: center; */
      width: 100%;

      h1 {
        font-family: var(--title-font);
        font-size: 5rem;
        margin-bottom: var(--spacing-1);
        color: hsla(var(--heading-color), 1);
      }
    }
  }

  @media screen and (max-width: 768px) {
        .note__content {
          padding: 0;
        }
    }

  .note__content {
    margin-bottom: var(--spacing-4);

    .grid-container {
      margin-bottom: var(--spacing-2);

      p {
        margin-bottom: 0;
        line-height: 0;
      }
    }

    p, li {
      font-size: var(--font-size-h5);
    }

    h2, h3, h4 {
        font-weight: 400;
        margin: var(--spacing-4) 0 var(--spacing-1) 0;
        font-family: var(--title-font);
        color: hsla(var(--heading-color), 1);
    }

    h4 {
        margin-bottom: var(--spacing-2);
    }

    ul {
      margin: var(--spacing-2) 0;
      padding-left: var(--spacing-1);
      display: flex;
      flex-direction: column;
      gap: var(--spacing-1);
    }

    ul:has(li input[type="checkbox"]) {
      list-style: none;
      padding-left: 0
    }

    ul:not(:has(li input[type="checkbox"])) {
      list-style: none;
      padding-left: 1.2em;
    }

    ul:not(:has(li input[type="checkbox"])) li::before {
      content: "━";
      color: hsla(var(--secondary-color), 1);
      position: absolute;
      margin-left: -1.2em;
    }

    blockquote {
      margin: 0;
      padding-left: var(--spacing-2);
  
      p {
        font-family: var(--title-font-italic);
        font-size: var(--font-size-h4)!important;
        position: relative;
          
        &:before {
          content: open-quote;
          opacity: .2;
          font-size: 7rem;
          position: absolute;
          left: -2rem;
          top: -50%;
        }
      }
    }

    article {
      img + em {
        text-align: center;
        width: 100%;
        display: block;
        font-size: var(--font-size-small);
      }

      input[type="checkbox"] {
        -webkit-appearance: none;
        appearance: none;
        /* background-color: hsla(var(--heading-color), 1); */
        margin: 0 .5rem 0 0;
        font: inherit;
        color: hsla(var(--heading-color), 1);
        width: 1em;
        height: 1em;
        border: 0.15em solid currentColor;
        border-radius: 0.15em;
        transform: translateY(-0.075em);
        display: inline-grid;
        place-content: center;
      }

      input[type="checkbox"]::before {
        content: "";
        width: 0.65em;
        height: 0.65em;
        clip-path: polygon(14% 44%, 0 65%, 50% 100%, 100% 16%, 80% 0%, 43% 62%);
        transform: scale(0);
        transform-origin: bottom left;
        transition: 120ms transform ease-in-out;
        background-color: hsla(var(--primary-color), 1);
      }

      input[type="checkbox"]:checked {
        background-color: hsla(var(--heading-color), 1);
      }

      input[type="checkbox"]:checked::before {
        transform: scale(1);
      }

      input[type="checkbox"]:focus {
        outline: max(2px, 0.15em) solid currentColor;
        outline-offset: max(2px, 0.15em);
      }

      p {
        margin-bottom: var(--spacing-2);
      }

        p, li {
            
            code {
                background: hsla(0, 0%, 90%, 0.1);
                border-radius: var(--radius-sm);
                padding: 2px 5px;
                font-weight: 500;
                font-family: "Geist Mono", "SF Mono", "Fira Code", "Fira Mono", "Roboto Mono", "Courier New", monospace;
            }

            a {
                text-decoration: underline hsla(var(--body-text-color), .3)!important;
                text-underline-offset: 3px;
                transition: .4s;
                color: hsla(var(--tertiary-color), 1);
    
                &:hover {
                    transition: .4s;
                }
            }
        }

        img {
            /* margin-bottom: var(--spacing-2); */
        }

        iframe {
          width: 100%;
          height: auto;
          max-width: 100%;
          aspect-ratio: 16/9;
          border-radius: var(--radius-md);
        }

        pre {
            margin-bottom: var(--spacing-2);
            padding: var(--spacing-1);
            border-radius: var(--radius-sm);
            font-size: var(--font-size-small);
            
            code {
                font-family: "Geist Mono", "SF Mono", "Fira Code", "Fira Mono", "Roboto Mono", "Courier New", monospace;
            }
        }
    }
}

.note-page {
  padding-top: calc(var(--spacing-8) + 14rem);
}
</style>