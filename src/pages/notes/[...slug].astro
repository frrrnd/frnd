---
import { getCollection } from 'astro:content';
import Layout from '../../layouts/Layout.astro';
import FormattedDate from '../../partials/formattedDate.astro';
import { SiteConfig } from '../../utils/SiteConfig';
import Header from '../../partials/Header.astro';
import Grid from '@components/utils/Grid.astro';

// export const prerender = true;
export async function getStaticPaths() {
    const notes = await getCollection('notes');
    return notes.map((note) => ({
        params: { slug: note.slug },
        props: { note },
    }));
}

const { note } = Astro.props;
const colors = note?.data?.colors ?? {};
const backgroundColor = colors.backgroundColor || "black";
const textColor = colors.textColor || "yellow";
const linkColor = colors.linkColor || "red";

let Content = null;
let frontmatter = {};

if (note) {
    frontmatter = note.data || {};
    if (note.render) {
        const rendered = await note.render();
        Content = rendered.Content || null;
    }
}

const themeClass = note?.data?.colors ? "custom-theme" : "light-theme";

const customStyles = `
  :root.${themeClass} {
    --backgroundColor: ${backgroundColor};
    --textColor: ${textColor};
    --linkColor: ${linkColor};
  }
`;

---

<Layout props={{ 
    title: `${frontmatter.title} â€” ${SiteConfig.title}`,
    description: SiteConfig.description,
    image: SiteConfig.image,
    themeClass: themeClass,
    }}>

    <Header />

    <main class="main">
        <article class="wrap-lg">
            <header>
                <h1>{note.data.title}</h1>
                <FormattedDate date={note.data.publishDate} />
            </header>
        
            <section class="note__content">
              <article>
                <Content />
              </article>
            </section>
        </article>
    </main>
</Layout>
<style set:html={customStyles}></style>
<style>
  :root.custom-theme {
    --primary-color: var(--backgroundColor);
    --secondary-color: var(--textColor);
    --tertiary-color: var(--linkColor);
  }

  article {
    p {
      a {
        color: hsla(var(--tertiary-color), 1);
        text-decoration-color: hsla(var(--tertiary-color), 1);
      }
    }

    header {
      margin-bottom: var(--spacing-4);
      text-align: center;
      width: 100%;

      h1 {
        font-family: var(--title-font);
        font-size: 3rem;
        margin-bottom: var(--spacing-1);
      }
    }
  }

  .note__content {
    margin-bottom: var(--spacing-4);

    h2, h3, h4 {
        font-weight: 400;
        margin-bottom: var(--spacing-1);
    }

    h2 {
      font-size: 1.2rem;
      font-weight: 500;
    }

    h3 {
      font-size: 1rem;
    }

    h4 {
        margin-bottom: var(--spacing-2);
    }

    ul {
      margin-bottom: var(--spacing-2);
    }

    article {
        p {
            margin-bottom: var(--spacing-2);

            code {
                background: hsla(0, 0%, 90%, 0.1);
                border-radius: var(--radius-sm);
                padding: 2px 5px;
                font-weight: 500;
                font-family: "Geist Mono", "SF Mono", "Fira Code", "Fira Mono", "Roboto Mono", "Courier New", monospace;
            }

            a {
                text-decoration: underline;
                text-underline-offset: 3px;
                text-decoration-color: hsla(var(--body-text-color), .5);
                transition: .4s;
    
                &:hover {
                    transition: .4s;
                }
            }
        }

        img {
            margin-bottom: var(--spacing-2);
        }

        pre {
            margin-bottom: var(--spacing-2);
            padding: var(--spacing-1);
            border-radius: var(--radius-sm);
            font-size: var(--font-size-small);
            
            code {
                font-family: "Geist Mono", "SF Mono", "Fira Code", "Fira Mono", "Roboto Mono", "Courier New", monospace;
            }
        }
    }
}
</style>