---
import { getCollection } from 'astro:content';
import Layout from '@layouts/Layout.astro';
import FormattedDate from '@partials/formattedDate.astro';
import { SiteConfig } from '@utils/SiteConfig';
import Header from '@partials/Header.astro';
import Footer from '@partials/Footer.astro';
import Grid from '@components/utils/Grid.astro';

// export const prerender = true;
export async function getStaticPaths() {
    const notes = await getCollection('notes');
    return notes.map((note) => ({
        params: { slug: note.slug },
        props: { note },
    }));
}

const { note } = Astro.props;
const colors = note?.data?.colors ?? {};
const backgroundColor = colors.backgroundColor || "black";
const textColor = colors.textColor || "yellow";
const linkColor = colors.linkColor || "red";
const headingColor = colors.headingColor || "blue";

let Content = null;
let frontmatter = {};

if (note) {
    frontmatter = note.data || {};
    if (note.render) {
        const rendered = await note.render();
        Content = rendered.Content || null;
    }
}

const themeClass = note?.data?.colors ? "custom-theme" : "dark-theme";

const customStyles = `
  :root.${themeClass} {
    --backgroundColor: ${backgroundColor};
    --textColor: ${textColor};
    --linkColor: ${linkColor};
    --headingColor: ${headingColor};
  }
`;

---

<Layout props={{ 
    title: `${frontmatter.title} â€” ${SiteConfig.title}`,
    description: SiteConfig.description,
    image: SiteConfig.image,
    themeClass: themeClass,
    }}>

    <Header />

    <main class="main">
        <article class="wrap-lg">
            <header>
                <FormattedDate date={note.data.publishDate} />
                <h1>{note.data.title}</h1>
            </header>
        
            <section class="note__content wrap-sm">
              <article>
                <Content />
              </article>
            </section>
        </article>
    </main>
    <Footer />
</Layout>
<style set:html={customStyles}></style>
<style>
  :root.custom-theme {
    --primary-color: var(--backgroundColor);
    --secondary-color: var(--textColor);
    --tertiary-color: var(--linkColor);
    --heading-color: var(--headingColor);
  }

  article {
    p {
      a {
        color: hsla(var(--tertiary-color), 1);
        text-decoration-color: hsla(var(--tertiary-color), 1)!important;
      }
    }

    header {
      margin-bottom: var(--spacing-4);
      text-align: center;
      width: 100%;

      h1 {
        font-family: var(--title-font);
        font-size: 5rem;
        margin-bottom: var(--spacing-1);
        color: hsla(var(--heading-color), 1);
      }
    }
  }

  @media screen and (max-width: 768px) {
        .note__content {
          padding: 0;
        }
    }

  .note__content {
    margin-bottom: var(--spacing-4);

    .grid-container {
      margin-bottom: var(--spacing-2);

      p {
        margin-bottom: 0;
        line-height: 0;
      }
    }

    p, li {
      font-size: var(--font-size-h5);
    }

    h2, h3, h4 {
        font-weight: 400;
        margin: var(--spacing-4) 0 var(--spacing-1) 0;
        font-family: var(--title-font);
        color: hsla(var(--heading-color), 1);
    }

    h4 {
        margin-bottom: var(--spacing-2);
    }

    ul {
      margin: var(--spacing-2) 0;
      padding-left: var(--spacing-1);
      display: flex;
      flex-direction: column;
      gap: var(--spacing-1);
    }

    blockquote {
      margin: 0;
      padding-left: var(--spacing-2);
  
      p {
        font-family: var(--title-font-italic);
        font-size: var(--font-size-h4)!important;
        position: relative;
          
        &:before {
          content: open-quote;
          opacity: .2;
          font-size: 7rem;
          position: absolute;
          left: -2rem;
          top: -50%;
        }
      }
    }

    article {
      img + em {
        text-align: center;
        width: 100%;
        display: block;
        font-size: var(--font-size-small);
      }

      p {
        margin-bottom: var(--spacing-2);
      }

        p, li {
            
            code {
                background: hsla(0, 0%, 90%, 0.1);
                border-radius: var(--radius-sm);
                padding: 2px 5px;
                font-weight: 500;
                font-family: "Geist Mono", "SF Mono", "Fira Code", "Fira Mono", "Roboto Mono", "Courier New", monospace;
            }

            a {
                text-decoration: underline hsla(var(--body-text-color), .3);
                text-underline-offset: 3px;
                transition: .4s;
                color: hsla(var(--body-text-color), 1);
    
                &:hover {
                    transition: .4s;
                }
            }
        }

        img {
            /* margin-bottom: var(--spacing-2); */
        }

        iframe {
          width: 100%;
          height: auto;
          max-width: 100%;
          aspect-ratio: 16/9;
          border-radius: var(--radius-md);
        }

        pre {
            margin-bottom: var(--spacing-2);
            padding: var(--spacing-1);
            border-radius: var(--radius-sm);
            font-size: var(--font-size-small);
            
            code {
                font-family: "Geist Mono", "SF Mono", "Fira Code", "Fira Mono", "Roboto Mono", "Courier New", monospace;
            }
        }
    }
}
</style>